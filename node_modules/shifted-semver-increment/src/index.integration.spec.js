'use strict';

/* eslint-disable no-unused-expressions */

const chai = require(`chai`);
const mocha = require(`mocha`);

const shiftedSemverIncrement = require(`./index`);

const expect = chai.expect;

const describe = mocha.describe;
const it = mocha.it;

describe(`shifted-semver-increment`, () => {
  describe(`major version zero`, () => {
    const testCases = [
      [`0.0.0`, `patch`, undefined, `0.0.1`],
      [`0.0.0`, `minor`, undefined, `0.0.1`],
      [`0.0.0`, `major`, undefined, `0.1.0`],

      [`0.0.0`, `prerelease`, undefined, `0.0.1-0`],
      [`0.0.0`, `prepatch`, undefined, `0.0.1-0`],
      [`0.0.0`, `preminor`, undefined, `0.0.1-0`],
      [`0.0.0`, `premajor`, undefined, `0.1.0-0`],

      [`0.1.0`, `patch`, undefined, `0.1.1`],
      [`0.1.0`, `minor`, undefined, `0.1.1`],
      [`0.1.0`, `major`, undefined, `0.2.0`],

      [`0.1.0`, `prerelease`, undefined, `0.1.1-0`],
      [`0.1.0`, `prepatch`, undefined, `0.1.1-0`],
      [`0.1.0`, `preminor`, undefined, `0.1.1-0`],
      [`0.1.0`, `premajor`, undefined, `0.2.0-0`],

      [`0.1.0-0`, `prerelease`, undefined, `0.1.0-1`],
      [`0.1.0-0`, `prepatch`, undefined, `0.1.1-0`],
      [`0.1.0-0`, `preminor`, undefined, `0.1.1-0`],
      [`0.1.0-0`, `premajor`, undefined, `0.2.0-0`],

      [`0.0.0`, `patch`, `beta`, `0.0.1`],
      [`0.0.0`, `minor`, `beta`, `0.0.1`],
      [`0.0.0`, `major`, `beta`, `0.1.0`],

      [`0.0.0`, `prerelease`, `beta`, `0.0.1-beta.0`],
      [`0.0.0`, `prepatch`, `beta`, `0.0.1-beta.0`],
      [`0.0.0`, `preminor`, `beta`, `0.0.1-beta.0`],
      [`0.0.0`, `premajor`, `beta`, `0.1.0-beta.0`],

      [`0.1.0-0`, `prerelease`, `beta`, `0.1.0-beta.0`],
      [`0.1.0-0`, `prepatch`, `beta`, `0.1.1-beta.0`],
      [`0.1.0-0`, `preminor`, `beta`, `0.1.1-beta.0`],
      [`0.1.0-0`, `premajor`, `beta`, `0.2.0-beta.0`],

      [`0.1.0-beta.0`, `prerelease`, `beta`, `0.1.0-beta.1`],
      [`0.1.0-beta.0`, `prepatch`, `beta`, `0.1.1-beta.0`],
      [`0.1.0-beta.0`, `preminor`, `beta`, `0.1.1-beta.0`],
      [`0.1.0-beta.0`, `premajor`, `beta`, `0.2.0-beta.0`],
    ];

    testCases.forEach(testCase =>
      it(`handles incrementing ${testCase[0]} using ${testCase[1]} to ${testCase[3]}`, () =>
        expect(shiftedSemverIncrement(testCase[0], testCase[1], testCase[2])).to.equal(testCase[3])));
  });

  describe(`non-major version zero`, () => {
    const testCases = [
      [`1.0.0`, `patch`, undefined, `1.0.1`],
      [`1.0.0`, `minor`, undefined, `1.1.0`],
      [`1.0.0`, `major`, undefined, `2.0.0`],

      [`1.0.0`, `prerelease`, undefined, `1.0.1-0`],
      [`1.0.0`, `prepatch`, undefined, `1.0.1-0`],
      [`1.0.0`, `preminor`, undefined, `1.1.0-0`],
      [`1.0.0`, `premajor`, undefined, `2.0.0-0`],

      [`1.0.0`, `prerelease`, `beta`, `1.0.1-beta.0`],
      [`1.0.0`, `prepatch`, `beta`, `1.0.1-beta.0`],
      [`1.0.0`, `preminor`, `beta`, `1.1.0-beta.0`],
      [`1.0.0`, `premajor`, `beta`, `2.0.0-beta.0`],

      [`1.0.0-beta.0`, `prerelease`, `beta`, `1.0.0-beta.1`],
      [`1.0.0-beta.0`, `prepatch`, `beta`, `1.0.1-beta.0`],
      [`1.0.0-beta.0`, `preminor`, `beta`, `1.1.0-beta.0`],
      [`1.0.0-beta.0`, `premajor`, `beta`, `2.0.0-beta.0`],

      [`1.0.1`, `patch`, undefined, `1.0.2`],
      [`1.0.1`, `minor`, undefined, `1.1.0`],
      [`1.0.1`, `major`, undefined, `2.0.0`],

      [`2.0.0`, `patch`, undefined, `2.0.1`],
      [`2.0.0`, `minor`, undefined, `2.1.0`],
      [`2.0.0`, `major`, undefined, `3.0.0`],
    ];

    testCases.forEach(testCase =>
      it(`handles incrementing ${testCase[0]} using ${testCase[1]} to ${testCase[3]}`, () =>
        expect(shiftedSemverIncrement(testCase[0], testCase[1], testCase[2])).to.equal(testCase[3])));
  });
});
